# -*- coding: utf-8 -*-
"""DA_assignment_UP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11sYSJRxgn-jXBLgZhu3j8_0ijvtkd8fe
"""

# import zipfile
import pandas as pd
# import numpy as np
import matplotlib.pyplot as plt
df1 = pd.read_csv('/content/boston.csv')

print(df1.head(5))

print(df1['SalePrice'].mean())

print(df1['SalePrice'].std())
# print(df1['SalePrice'].

coefficientOfVariation=df1['SalePrice'].std()/df1['SalePrice'].mean()
print(coefficientOfVariation)

# before IQR 
fig, ax = plt.subplots(figsize=(10,6))
ax.scatter(df1['GrLivArea'], df1['SalePrice'])
ax.set_xlabel('GrLivArea')
ax.set_ylabel('SalePrice')
plt.show()

Q1 = df1.quantile(0.25)
Q3 = df1.quantile(0.75)
IQR = Q3 - Q1
print(IQR)

# removing outlier data (performing EDA tasks)
df1 = df1[~((df1 < (Q1-1.5 * IQR)) |(df1 > (Q3 + 1.5 * IQR))).any(axis=1)]
df1.shape

fig, ax = plt.subplots(figsize=(5,3))
ax.scatter(df1['GrLivArea'], df1['SalePrice'])
ax.set_xlabel('GrLivArea')
ax.set_ylabel('SalePrice')
plt.show()
# same plot after removing outlier data, although incorrect use-case but this is only for demonstration

import seaborn as sns #visualisation

plt.figure(figsize=(40,30))
c= df1.corr()
sns.heatmap(c,annot=True)

"""Descriptive analytics"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df = pd.read_csv(
    '/content/sample (1).csv')
# first

print(df.head(5))

df['Sales'] = df['item_price']*df['item_cnt_day']
df.head(6)

# second
# there are 34 months, so average monthly sales is total sales/number of months
print(df[['Sales']].sum())
sumation = df[['Sales']].sum()
monthly_sales = sumation/34
print("monthly sales equals", monthly_sales)

# number 7
# df.groupby(by=['shop_name']).sum()

# bar chart representing sales
df_shop_sales =df.groupby(by=['shop_name']).sum()

# number 3
objects = ['ajloun','aqaba','east_amman','irbid','west_amman']
y_pos = np.arange(len(objects))
performance = (df_shop_sales['Sales']).tolist()
width=0.65
print(performance)

fig, ax = plt.subplots()
rects = ax.bar(y_pos - width/2, performance, width, label='objects')
ax.set_xticks(y_pos)
ax.set_xticklabels(objects)
ax.set_ylabel('sales(100M) USD')
ax.set_title('Sales of each shop')
ax.set_xticks(y_pos)
ax.set_xticklabels(objects)
ax.legend()

fig.tight_layout()

plt.show()
# plt.xticks(y_pos,performance)

# plt.show()

# finding mean, median and midrange for question 4
print(df_shop_sales['Sales'].mean())
midrange_value = (performance[4]-performance[0])/2
print(midrange_value)
print(df_shop_sales['Sales'].median())

# number 5
df_eastAmman= df[df['shop_name']=='east_amman']
df_items = df_eastAmman.groupby(by=['item_id']).sum()
df_items = df_items.reset_index()
df_items = df_items.sort_values(['item_cnt_day'],ascending= False)
df_items.head(1)

# no. 7
print(df_items['item_cnt_day'].sum())

# ///////////////////////////# number 5

df_westAmman= df[df['shop_name']=='west_amman']
df_items = df_westAmman.groupby(by=['item_id']).sum()
df_items = df_items.reset_index()
df_items = df_items.sort_values(['item_cnt_day'],ascending= False)
df_items.head(1)

# no. 7
print(df_items['item_cnt_day'].sum())

# ///////////////////////////# number 5

df_ajloun= df[df['shop_name']=='ajloun']
df_items = df_ajloun.groupby(by=['item_id']).sum()
df_items = df_items.reset_index()
df_items = df_items.sort_values(['item_cnt_day'],ascending= False)
df_items.head(1)

# no. 7
print(df_items['item_cnt_day'].sum())

# number 5

df_aqaba= df[df['shop_name']=='aqaba']
df_items = df_aqaba.groupby(by=['item_id']).sum()
df_items = df_items.reset_index()
df_items = df_items.sort_values(['item_cnt_day'],ascending= False)
df_items.head(1)

# no. 7
print(df_items['item_cnt_day'].sum())

# number 5

df_irbid= df[df['shop_name']=='irbid']
df_items = df_irbid.groupby(by=['item_id']).sum()
df_items = df_items.reset_index()
df_items = df_items.sort_values(['item_cnt_day'],ascending= False)
df_items.head(1)

# no. 7
print(df_items['item_cnt_day'].sum())

# number 6
df_items = df.groupby(by=['item_id']).sum()
df_items = df_items.reset_index()
df_items = df_items.sort_values(['item_cnt_day'],ascending= False)
df_items.head(10)

df_for_items = df.drop_duplicates(subset=['item_id'])
df_for_items.head()

# no. 8
print(df_for_items['item_price'].mean())

# no. 9
print(df_for_items['item_price'].median())

# no. 10
print(df_for_items['item_price'].std())

df_irbid_items = df[df['shop_name']=='irbid']
df_irbid_items = df_irbid_items.drop_duplicates(subset=['item_id'])

print(df_for_items['item_price'].mean()) # no. 11
print(df_for_items['item_price'].median()) # no. 12

df_ajloun_items = df[df['shop_name']=='ajloun']
df_ajloun_items = df_ajloun_items.drop_duplicates(subset=['item_id'])

print(df_for_items['item_price'].mean()) # no. 11
print(df_for_items['item_price'].median()) # no. 12

df_aqaba_items = df[df['shop_name']=='aqaba']
df_aqaba_items = df_aqaba_items.drop_duplicates(subset=['item_id'])

print(df_for_items['item_price'].mean()) # no. 11
print(df_for_items['item_price'].median()) # no. 12

df_west_amman_items = df[df['shop_name']=='west_amman']
df_west_amman_items = df_west_amman_items.drop_duplicates(subset=['item_id'])

print(df_for_items['item_price'].mean()) # no. 11
print(df_for_items['item_price'].median()) # no. 12

df_east_amman_items = df[df['shop_name']=='east_amman']
df_east_amman_items = df_east_amman_items.drop_duplicates(subset=['item_id'])

print(df_for_items['item_price'].mean()) # no. 11
print(df_for_items['item_price'].median()) # no. 12

df_irbid= df[df['shop_name']=='irbid']
dummies = pd.get_dummies(df_irbid['date_block_num'], prefix='m_')
df_irbid = pd.concat([df_irbid,dummies], axis=1)
print(df_irbid)

mylist = []
sales_m0=df_irbid[df_irbid['m__0']==1]['Sales'].sum()
print(sales_m0)
mylist.append(sales_m0)
sales_m1=df_irbid[df_irbid['m__1']==1]['Sales'].sum()
print(sales_m1)
mylist.append(sales_m1)
sales_m2=df_irbid[df_irbid['m__2']==1]['Sales'].sum()
print(sales_m2)
mylist.append(sales_m2)
sales_m3=df_irbid[df_irbid['m__3']==1]['Sales'].sum()
print(sales_m3)
mylist.append(sales_m3)
sales_m4=df_irbid[df_irbid['m__4']==1]['Sales'].sum()
print(sales_m4)
mylist.append(sales_m4)
sales_m5=df_irbid[df_irbid['m__5']==1]['Sales'].sum()
print(sales_m5)
mylist.append(sales_m5)
sales_m6=df_irbid[df_irbid['m__6']==1]['Sales'].sum()
print(sales_m6)
mylist.append(sales_m6)
sales_m7=df_irbid[df_irbid['m__7']==1]['Sales'].sum()
print(sales_m7)
mylist.append(sales_m7)
sales_m8=df_irbid[df_irbid['m__8']==1]['Sales'].sum()
print(sales_m8)
mylist.append(sales_m8)
sales_m9=df_irbid[df_irbid['m__9']==1]['Sales'].sum()
print(sales_m9)
mylist.append(sales_m9)
sales_m10=df_irbid[df_irbid['m__10']==1]['Sales'].sum()
print(sales_m10)
mylist.append(sales_m10)
sales_m11=df_irbid[df_irbid['m__11']==1]['Sales'].sum()
print(sales_m11)
mylist.append(sales_m11)
print(mylist)

plt.plot(mylist,'b-o', label = 'sales' )
plt.ylabel('Sales (1M) USD')
plt.xlabel('Months')
plt.title('First year sales of Irbid shop')
# plt.bar(y_pos,performance, label = 'sales')
plt.legend()
plt.show()

sales_m12=df_irbid[df_irbid['m__12']==1]['Sales'].sum()
mylist.append(sales_m12)

sales_list = [[]]

df_eastAmman = df[df['shop_name']=='east_amman']
df_eastAmman.head()

df_all_sales_east_amman = df_eastAmman.groupby(by=['date_block_num']).sum()
df_all_sales_east_amman = df_all_sales_east_amman.reset_index()
df_all_sales_east_amman = df_all_sales_east_amman.sort_values(['date_block_num'])
df_all_sales_east_amman.head(34)
sales_list.append(df_all_sales_east_amman['Sales'])

df_westAmman = df[df['shop_name']=='west_amman']
df_westAmman.head()

df_all_sales_west_amman = df_westAmman.groupby(by=['date_block_num']).sum()
df_all_sales_west_amman = df_all_sales_west_amman.reset_index()
df_all_sales_west_amman = df_all_sales_west_amman.sort_values(['date_block_num'])
df_all_sales_west_amman.head(34)
sales_list.append(df_all_sales_west_amman['Sales'])

df_irbid= df[df['shop_name']=='irbid']
df_irbid.head()

df_all_sales_irbid = df_irbid.groupby(by=['date_block_num']).sum()
df_all_sales_irbid = df_all_sales_irbid.reset_index()
df_all_sales_irbid = df_all_sales_irbid.sort_values(['date_block_num'])
df_all_sales_irbid.head(34)
sales_list.append(df_all_sales_irbid['Sales'])

df_ajloun = df[df['shop_name']=='ajloun']
df_ajloun.head()

df_all_sales_ajloun = df_ajloun.groupby(by=['date_block_num']).sum()
df_all_sales_ajloun = df_all_sales_ajloun.reset_index()
df_all_sales_ajloun = df_all_sales_ajloun.sort_values(['date_block_num'])
df_all_sales_ajloun.head(34)
sales_list.append(df_all_sales_ajloun['Sales'])

df_aqaba = df[df['shop_name']=='aqaba']
df_aqaba.head()

df_all_sales_aqaba = df_aqaba.groupby(by=['date_block_num']).sum()
df_all_sales_aqaba = df_all_sales_aqaba.reset_index()
df_all_sales_aqaba = df_all_sales_aqaba.sort_values(['date_block_num'])
df_all_sales_aqaba.head(34)
sales_list.append(df_all_sales_aqaba['Sales'])

plt.plot(sales_list[1],'r-o', label = 'sales for east amman')
plt.plot(sales_list[2],'-o', label = 'sales for west amman')
plt.plot(sales_list[3],'g-o', label = 'sales for irbid')
plt.plot(sales_list[4],'b-o', label = 'sales for ajloun')
plt.plot(sales_list[5],'y-o', label = 'sales for aqaba')                         
plt.ylabel('Sales (10M) USD')
plt.xlabel('Months')
plt.title('Sales of all shops')
# plt.bar(y_pos,performance, label = 'sales')
plt.legend()
plt.show()

"""**Predictive part**

---
"""

# dummies = pd.get_dummies(df['date_block_num'], prefix='m_')
# df = pd.concat([df, dummies], axis=1)

eastAmman_list = []

eastAmman_list.append(df_all_sales_east_amman['Sales'])
# print(eastAmman_list)

y_axis = eastAmman_list
X_axis = df_eastAmman['date_block_num'].drop_duplicates()
# print(X_axis)
plt.xticks()
plt.ylabel('sales (10M) USD')
plt.xlabel('time(months)')
plt.scatter(X_axis,y_axis, label = 'sales')
plt.legend()
plt.show()

westAmman_list = []
westAmman_list.append(df_all_sales_west_amman['Sales'])
print(westAmman_list)

y_axis = westAmman_list
X_axis = df_westAmman['date_block_num'].drop_duplicates()

plt.xticks()
plt.xlabel('time(months)')
plt.ylabel('sales(10M) USD')
plt.scatter(X_axis,y_axis, label = 'sales')
plt.legend()
plt.show()

# sales_m12=df_irbid[df_irbid['m__12']==1]['Sales'].sum()
# mylist.append(sales_m12)
print(mylist)

from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score
# from sklearn.metrics import precision_score
# from sklearn.metrics import accuracy_score
# from sklearn.metrics import recall_score
from sklearn.metrics import mean_squared_error
import math

df_irbid = df_irbid.groupby(by=['date_block_num'] ).sum()
df_irbid = df_irbid.reset_index()
df_irbid = df_irbid.sort_values(['date_block_num'])
# print(df_irbid)
df_irbid.head(13)
# print(mylist)

df_irbid.corr().head(8)

# number 3

# # print(mylist)

# X = df_irbid[['item_cnt_day','date_block_num']].head(13)
# y = pd.DataFrame(mylist)

# X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.2, random_state = 1)
# # print(y)
# # print(X)


# model = LinearRegression()
# model.fit(X_train, y_train)
# prediction = model.predict(X_test)
# training_predictions = model.predict(X_train)

# print(prediction)
# # print('prediction of next months sales is', prediction[[12]])
# # print('actual sales of the same month = ',mylist[12])
# # difference = mylist[12]-prediction[[12]]
# # print('difference between actual sales and predicted sales = ',difference)

# print(math.sqrt(mean_squared_error(y_train,training_predictions))) #training
# print(r2_score(y_train,training_predictions))

# print(math.sqrt(mean_squared_error(y_test,prediction))) #testing
# print(r2_score(y_test,prediction))

# print(recall_score(y,prediction))
# print(precision_score(y_test,prediction))
# print(accuracy_score(y_test,prediction))

degree = 2
# I left degree equal to 2 because I felt like 3 will be over-fit
features = PolynomialFeatures(degree = degree)
X = df_irbid[['item_price']].head(13)

y = pd.DataFrame(mylist)

X_poly = features.fit_transform(X)
X_train, X_test, y_train, y_test = train_test_split(X_poly,y,test_size = 0.2, random_state = 1)
model = LinearRegression()
model.fit(X_train,y_train)
prediction = model.predict(X_test)
training_predictions = model.predict(X_train)
print(training_predictions)
print(prediction)
print(math.sqrt(mean_squared_error(y_train,training_predictions))) #training
print(r2_score(y_train,training_predictions))

print(math.sqrt(mean_squared_error(y_test,prediction))) #testing
print(r2_score(y_test,prediction))

# Xnew = [['2.726512e+06']]
# ynew = model.predict(Xnew)
# print("X=%s, Predicted=%s" % (Xnew[0], ynew[0]))

print('prediction of next months sales is', prediction[[2]])
print('actual sales of the same month = ',mylist[12])
difference = mylist[12]-prediction[[2]]
print('difference between actual sales and predicted sales = ',difference)

"""PREDICTIVE PART C"""

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score

df = pd.read_csv('/content/heart 2.csv')
X = df[['age']]
y = df['target']

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=1)

model_1 = LogisticRegression()

model_1.fit(X_train, y_train)
prediction = model_1.predict(X_test)

print(accuracy_score(y_test, prediction))
print(precision_score(y_test, prediction))

dummies = pd.get_dummies(df['cp'], prefix='cp')
df = pd.concat([df, dummies], axis=1)
X = df[['age', 'cp_1', 'cp_3', 'cp_2', 'sex']]
y = df['target']

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=1)

model_1 = LogisticRegression()

model_1.fit(X_train, y_train)
prediction = model_1.predict(X_test)

print(accuracy_score(y_test, prediction))
print(precision_score(y_test, prediction))